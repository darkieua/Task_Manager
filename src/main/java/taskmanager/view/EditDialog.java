package taskmanager.view;

import com.github.lgooddatepicker.components.DateTimePicker;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import taskmanager.controller.MainController;
import taskmanager.model.Task;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class EditDialog extends Dialog {
    private MainController mainController;

    private int WINDOW_HEIGHT = 250;
    private int WINDOW_WEIGHT = 400;

    private JPanel contentPane;
    private JButton buttonSave;
    private JButton buttonCancel;
    private JTextField titleField;
    private JLabel dateLabel;
    private JTextField intervalField;
    private JLabel startLabel;
    private JLabel endLabel;
    private JLabel intervalLabel;
    private JCheckBox activeCheckBox;
    private JCheckBox repeatedCheckBox;
    private JPanel checkBoxes;
    private JPanel Fields;
    private JLabel titleLabel;
    private DateTimePicker dateDatepicker;
    private DateTimePicker startDatepicker;
    private DateTimePicker endDatepicker;
    private JComboBox intervalCombobox;

    private Task editedTask;


    public void setEditedTask(Task editedTask) {
        this.editedTask = editedTask;
    }

    public Task getEditedTask() {
        return editedTask;
    }

    public void setFormRepeated(boolean repeated) {
        if (repeated) {
            intervalField.setText("1");
            //Поля с датами начала, конца и интервала делаются доступными для редактирования, поле с датой исполнения - недоступным
            startDatepicker.setEnabled(true);
            endDatepicker.setEnabled(true);
            intervalField.setEditable(true);
            intervalCombobox.setEnabled(true);
            dateDatepicker.setEnabled(false);
        } else {
            //Поля с датой исполнения доступное для редактирования, поля с датами начала, конца и интервала - нет
            startDatepicker.setEnabled(false);
            endDatepicker.setEnabled(false);
            intervalField.setEditable(false);
            intervalCombobox.setEnabled(false);
            dateDatepicker.setEnabled(true);
        }

    }

    public void setEditCombobox() {
        String[] timeUnits = {"s", "m", "h"};
        int DEFAULT_TIMEUNIT = 0; //Index of selected by default time unit
        for (String timeUnit : timeUnits) {
            this.getIntervalCombobox().addItem(timeUnit);
        }
        this.getIntervalCombobox().setSelectedItem(DEFAULT_TIMEUNIT);
    }


    public JButton getButtonSave() {
        return buttonSave;
    }

    public JButton getButtonCancel() {
        return buttonCancel;
    }

    public JTextField getTitleField() {
        return titleField;
    }

    public JTextField getIntervalField() {
        return intervalField;
    }

    public JCheckBox getActiveCheckBox() {
        return activeCheckBox;
    }

    public JCheckBox getRepeatedCheckBox() {
        return repeatedCheckBox;
    }

    public DateTimePicker getDateDatepicker() {
        return dateDatepicker;
    }

    public DateTimePicker getStartDatepicker() {
        return startDatepicker;
    }

    public DateTimePicker getEndDatepicker() {
        return endDatepicker;
    }

    public JComboBox getIntervalCombobox() {
        return intervalCombobox;
    }

    public EditDialog(MainController mainController, String dialogTitle) {
        super(mainController.getMainForm(), dialogTitle);
        this.mainController = mainController;
        setModal(true);
        setContentPane(contentPane);
        getRootPane().setDefaultButton(buttonSave);
        setResizable(false);
        setPreferredSize(new Dimension(WINDOW_WEIGHT, WINDOW_HEIGHT));
        setLocationRelativeTo(null);

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonSave = new JButton();
        buttonSave.setText("Save");
        panel2.add(buttonSave, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Fields = new JPanel();
        Fields.setLayout(new GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(Fields, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        titleField = new JTextField();
        Fields.add(titleField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        dateLabel = new JLabel();
        dateLabel.setText("Date");
        Fields.add(dateLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startLabel = new JLabel();
        startLabel.setText("Start");
        Fields.add(startLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        endLabel = new JLabel();
        endLabel.setText("End");
        Fields.add(endLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        intervalLabel = new JLabel();
        intervalLabel.setText("Interval");
        Fields.add(intervalLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        intervalField = new JTextField();
        Fields.add(intervalField, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        titleLabel = new JLabel();
        titleLabel.setText("Title");
        Fields.add(titleLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dateDatepicker = new DateTimePicker();
        Fields.add(dateDatepicker, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        startDatepicker = new DateTimePicker();
        Fields.add(startDatepicker, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        endDatepicker = new DateTimePicker();
        Fields.add(endDatepicker, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        intervalCombobox = new JComboBox();
        Fields.add(intervalCombobox, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        checkBoxes = new JPanel();
        checkBoxes.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(checkBoxes, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        activeCheckBox = new JCheckBox();
        activeCheckBox.setEnabled(true);
        activeCheckBox.setSelected(true);
        activeCheckBox.setText("Active");
        checkBoxes.add(activeCheckBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        repeatedCheckBox = new JCheckBox();
        repeatedCheckBox.setText("Repeated");
        checkBoxes.add(repeatedCheckBox, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        checkBoxes.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
